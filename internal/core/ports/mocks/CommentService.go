// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "robinhood/internal/core/domains"

	mock "github.com/stretchr/testify/mock"
)

// CommentService is an autogenerated mock type for the CommentService type
type CommentService struct {
	mock.Mock
}

type CommentService_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentService) EXPECT() *CommentService_Expecter {
	return &CommentService_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function with given fields: _a0, _a1
func (_m *CommentService) CreateComment(_a0 context.Context, _a1 *domains.CreateCommentRequest) (*domains.PopulatedComment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.PopulatedComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateCommentRequest) (*domains.PopulatedComment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateCommentRequest) *domains.PopulatedComment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.PopulatedComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.CreateCommentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentService_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type CommentService_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.CreateCommentRequest
func (_e *CommentService_Expecter) CreateComment(_a0 interface{}, _a1 interface{}) *CommentService_CreateComment_Call {
	return &CommentService_CreateComment_Call{Call: _e.mock.On("CreateComment", _a0, _a1)}
}

func (_c *CommentService_CreateComment_Call) Run(run func(_a0 context.Context, _a1 *domains.CreateCommentRequest)) *CommentService_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.CreateCommentRequest))
	})
	return _c
}

func (_c *CommentService_CreateComment_Call) Return(_a0 *domains.PopulatedComment, _a1 error) *CommentService_CreateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentService_CreateComment_Call) RunAndReturn(run func(context.Context, *domains.CreateCommentRequest) (*domains.PopulatedComment, error)) *CommentService_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCommentTx provides a mock function with given fields: _a0, _a1
func (_m *CommentService) CreateCommentTx(_a0 context.Context, _a1 *domains.CreateCommentRequest) (*domains.PopulatedComment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.PopulatedComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateCommentRequest) (*domains.PopulatedComment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateCommentRequest) *domains.PopulatedComment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.PopulatedComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.CreateCommentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentService_CreateCommentTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommentTx'
type CommentService_CreateCommentTx_Call struct {
	*mock.Call
}

// CreateCommentTx is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.CreateCommentRequest
func (_e *CommentService_Expecter) CreateCommentTx(_a0 interface{}, _a1 interface{}) *CommentService_CreateCommentTx_Call {
	return &CommentService_CreateCommentTx_Call{Call: _e.mock.On("CreateCommentTx", _a0, _a1)}
}

func (_c *CommentService_CreateCommentTx_Call) Run(run func(_a0 context.Context, _a1 *domains.CreateCommentRequest)) *CommentService_CreateCommentTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.CreateCommentRequest))
	})
	return _c
}

func (_c *CommentService_CreateCommentTx_Call) Return(_a0 *domains.PopulatedComment, _a1 error) *CommentService_CreateCommentTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentService_CreateCommentTx_Call) RunAndReturn(run func(context.Context, *domains.CreateCommentRequest) (*domains.PopulatedComment, error)) *CommentService_CreateCommentTx_Call {
	_c.Call.Return(run)
	return _c
}

// ListComment provides a mock function with given fields: _a0, _a1
func (_m *CommentService) ListComment(_a0 context.Context, _a1 *domains.ListCommentRequest) ([]domains.PopulatedComment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domains.PopulatedComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.ListCommentRequest) ([]domains.PopulatedComment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.ListCommentRequest) []domains.PopulatedComment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domains.PopulatedComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.ListCommentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentService_ListComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListComment'
type CommentService_ListComment_Call struct {
	*mock.Call
}

// ListComment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.ListCommentRequest
func (_e *CommentService_Expecter) ListComment(_a0 interface{}, _a1 interface{}) *CommentService_ListComment_Call {
	return &CommentService_ListComment_Call{Call: _e.mock.On("ListComment", _a0, _a1)}
}

func (_c *CommentService_ListComment_Call) Run(run func(_a0 context.Context, _a1 *domains.ListCommentRequest)) *CommentService_ListComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.ListCommentRequest))
	})
	return _c
}

func (_c *CommentService_ListComment_Call) Return(_a0 []domains.PopulatedComment, _a1 error) *CommentService_ListComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentService_ListComment_Call) RunAndReturn(run func(context.Context, *domains.ListCommentRequest) ([]domains.PopulatedComment, error)) *CommentService_ListComment_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCommentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentService creates a new instance of CommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentService(t mockConstructorTestingTNewCommentService) *CommentService {
	mock := &CommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
