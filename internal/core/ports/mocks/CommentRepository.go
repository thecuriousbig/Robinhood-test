// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "robinhood/internal/core/domains"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

type CommentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentRepository) EXPECT() *CommentRepository_Expecter {
	return &CommentRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *CommentRepository) Create(_a0 context.Context, _a1 *domains.CreateCommentRequest) (*domains.Comment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateCommentRequest) (*domains.Comment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateCommentRequest) *domains.Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.CreateCommentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CommentRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.CreateCommentRequest
func (_e *CommentRepository_Expecter) Create(_a0 interface{}, _a1 interface{}) *CommentRepository_Create_Call {
	return &CommentRepository_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *CommentRepository_Create_Call) Run(run func(_a0 context.Context, _a1 *domains.CreateCommentRequest)) *CommentRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.CreateCommentRequest))
	})
	return _c
}

func (_c *CommentRepository_Create_Call) Return(_a0 *domains.Comment, _a1 error) *CommentRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentRepository_Create_Call) RunAndReturn(run func(context.Context, *domains.CreateCommentRequest) (*domains.Comment, error)) *CommentRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTx provides a mock function with given fields: _a0, _a1, _a2
func (_m *CommentRepository) CreateTx(_a0 context.Context, _a1 *domains.CreateCommentRequest, _a2 domains.CreateCommentFn) (*domains.PopulatedComment, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *domains.PopulatedComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateCommentRequest, domains.CreateCommentFn) (*domains.PopulatedComment, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateCommentRequest, domains.CreateCommentFn) *domains.PopulatedComment); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.PopulatedComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.CreateCommentRequest, domains.CreateCommentFn) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepository_CreateTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTx'
type CommentRepository_CreateTx_Call struct {
	*mock.Call
}

// CreateTx is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.CreateCommentRequest
//   - _a2 domains.CreateCommentFn
func (_e *CommentRepository_Expecter) CreateTx(_a0 interface{}, _a1 interface{}, _a2 interface{}) *CommentRepository_CreateTx_Call {
	return &CommentRepository_CreateTx_Call{Call: _e.mock.On("CreateTx", _a0, _a1, _a2)}
}

func (_c *CommentRepository_CreateTx_Call) Run(run func(_a0 context.Context, _a1 *domains.CreateCommentRequest, _a2 domains.CreateCommentFn)) *CommentRepository_CreateTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.CreateCommentRequest), args[2].(domains.CreateCommentFn))
	})
	return _c
}

func (_c *CommentRepository_CreateTx_Call) Return(_a0 *domains.PopulatedComment, _a1 error) *CommentRepository_CreateTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentRepository_CreateTx_Call) RunAndReturn(run func(context.Context, *domains.CreateCommentRequest, domains.CreateCommentFn) (*domains.PopulatedComment, error)) *CommentRepository_CreateTx_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *CommentRepository) List(_a0 context.Context, _a1 string) ([]domains.PopulatedComment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domains.PopulatedComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domains.PopulatedComment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domains.PopulatedComment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domains.PopulatedComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CommentRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *CommentRepository_Expecter) List(_a0 interface{}, _a1 interface{}) *CommentRepository_List_Call {
	return &CommentRepository_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *CommentRepository_List_Call) Run(run func(_a0 context.Context, _a1 string)) *CommentRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CommentRepository_List_Call) Return(_a0 []domains.PopulatedComment, _a1 error) *CommentRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentRepository_List_Call) RunAndReturn(run func(context.Context, string) ([]domains.PopulatedComment, error)) *CommentRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCommentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentRepository(t mockConstructorTestingTNewCommentRepository) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
