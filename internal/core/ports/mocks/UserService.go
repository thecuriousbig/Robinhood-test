// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "robinhood/internal/core/domains"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *UserService) Login(_a0 context.Context, _a1 *domains.LoginRequest) (*domains.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.LoginRequest) (*domains.LoginResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.LoginRequest) *domains.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.LoginRequest
func (_e *UserService_Expecter) Login(_a0 interface{}, _a1 interface{}) *UserService_Login_Call {
	return &UserService_Login_Call{Call: _e.mock.On("Login", _a0, _a1)}
}

func (_c *UserService_Login_Call) Run(run func(_a0 context.Context, _a1 *domains.LoginRequest)) *UserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.LoginRequest))
	})
	return _c
}

func (_c *UserService_Login_Call) Return(_a0 *domains.LoginResponse, _a1 error) *UserService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Login_Call) RunAndReturn(run func(context.Context, *domains.LoginRequest) (*domains.LoginResponse, error)) *UserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *UserService) Register(_a0 context.Context, _a1 *domains.RegisterRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.RegisterRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.RegisterRequest
func (_e *UserService_Expecter) Register(_a0 interface{}, _a1 interface{}) *UserService_Register_Call {
	return &UserService_Register_Call{Call: _e.mock.On("Register", _a0, _a1)}
}

func (_c *UserService_Register_Call) Run(run func(_a0 context.Context, _a1 *domains.RegisterRequest)) *UserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.RegisterRequest))
	})
	return _c
}

func (_c *UserService_Register_Call) Return(_a0 error) *UserService_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Register_Call) RunAndReturn(run func(context.Context, *domains.RegisterRequest) error) *UserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *UserService) Update(_a0 context.Context, _a1 *domains.UpdateUserRequest) (*domains.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.UpdateUserRequest) (*domains.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.UpdateUserRequest) *domains.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.UpdateUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.UpdateUserRequest
func (_e *UserService_Expecter) Update(_a0 interface{}, _a1 interface{}) *UserService_Update_Call {
	return &UserService_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *UserService_Update_Call) Run(run func(_a0 context.Context, _a1 *domains.UpdateUserRequest)) *UserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.UpdateUserRequest))
	})
	return _c
}

func (_c *UserService_Update_Call) Return(_a0 *domains.User, _a1 error) *UserService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Update_Call) RunAndReturn(run func(context.Context, *domains.UpdateUserRequest) (*domains.User, error)) *UserService_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
