// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "robinhood/internal/core/domains"

	mock "github.com/stretchr/testify/mock"
)

// BlogService is an autogenerated mock type for the BlogService type
type BlogService struct {
	mock.Mock
}

type BlogService_Expecter struct {
	mock *mock.Mock
}

func (_m *BlogService) EXPECT() *BlogService_Expecter {
	return &BlogService_Expecter{mock: &_m.Mock}
}

// ArchiveBlog provides a mock function with given fields: _a0, _a1
func (_m *BlogService) ArchiveBlog(_a0 context.Context, _a1 *domains.ArchiveBlogRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.ArchiveBlogRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlogService_ArchiveBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchiveBlog'
type BlogService_ArchiveBlog_Call struct {
	*mock.Call
}

// ArchiveBlog is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.ArchiveBlogRequest
func (_e *BlogService_Expecter) ArchiveBlog(_a0 interface{}, _a1 interface{}) *BlogService_ArchiveBlog_Call {
	return &BlogService_ArchiveBlog_Call{Call: _e.mock.On("ArchiveBlog", _a0, _a1)}
}

func (_c *BlogService_ArchiveBlog_Call) Run(run func(_a0 context.Context, _a1 *domains.ArchiveBlogRequest)) *BlogService_ArchiveBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.ArchiveBlogRequest))
	})
	return _c
}

func (_c *BlogService_ArchiveBlog_Call) Return(_a0 error) *BlogService_ArchiveBlog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlogService_ArchiveBlog_Call) RunAndReturn(run func(context.Context, *domains.ArchiveBlogRequest) error) *BlogService_ArchiveBlog_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBlog provides a mock function with given fields: _a0, _a1
func (_m *BlogService) CreateBlog(_a0 context.Context, _a1 *domains.CreateBlogRequest) (*domains.PopulatedBlog, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.PopulatedBlog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateBlogRequest) (*domains.PopulatedBlog, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateBlogRequest) *domains.PopulatedBlog); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.PopulatedBlog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.CreateBlogRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlogService_CreateBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBlog'
type BlogService_CreateBlog_Call struct {
	*mock.Call
}

// CreateBlog is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.CreateBlogRequest
func (_e *BlogService_Expecter) CreateBlog(_a0 interface{}, _a1 interface{}) *BlogService_CreateBlog_Call {
	return &BlogService_CreateBlog_Call{Call: _e.mock.On("CreateBlog", _a0, _a1)}
}

func (_c *BlogService_CreateBlog_Call) Run(run func(_a0 context.Context, _a1 *domains.CreateBlogRequest)) *BlogService_CreateBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.CreateBlogRequest))
	})
	return _c
}

func (_c *BlogService_CreateBlog_Call) Return(_a0 *domains.PopulatedBlog, _a1 error) *BlogService_CreateBlog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlogService_CreateBlog_Call) RunAndReturn(run func(context.Context, *domains.CreateBlogRequest) (*domains.PopulatedBlog, error)) *BlogService_CreateBlog_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBlogTx provides a mock function with given fields: _a0, _a1
func (_m *BlogService) CreateBlogTx(_a0 context.Context, _a1 *domains.CreateBlogRequest) (*domains.PopulatedBlog, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.PopulatedBlog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateBlogRequest) (*domains.PopulatedBlog, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateBlogRequest) *domains.PopulatedBlog); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.PopulatedBlog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.CreateBlogRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlogService_CreateBlogTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBlogTx'
type BlogService_CreateBlogTx_Call struct {
	*mock.Call
}

// CreateBlogTx is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.CreateBlogRequest
func (_e *BlogService_Expecter) CreateBlogTx(_a0 interface{}, _a1 interface{}) *BlogService_CreateBlogTx_Call {
	return &BlogService_CreateBlogTx_Call{Call: _e.mock.On("CreateBlogTx", _a0, _a1)}
}

func (_c *BlogService_CreateBlogTx_Call) Run(run func(_a0 context.Context, _a1 *domains.CreateBlogRequest)) *BlogService_CreateBlogTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.CreateBlogRequest))
	})
	return _c
}

func (_c *BlogService_CreateBlogTx_Call) Return(_a0 *domains.PopulatedBlog, _a1 error) *BlogService_CreateBlogTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlogService_CreateBlogTx_Call) RunAndReturn(run func(context.Context, *domains.CreateBlogRequest) (*domains.PopulatedBlog, error)) *BlogService_CreateBlogTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlogByID provides a mock function with given fields: _a0, _a1
func (_m *BlogService) GetBlogByID(_a0 context.Context, _a1 string) (*domains.PopulatedBlog, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.PopulatedBlog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domains.PopulatedBlog, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domains.PopulatedBlog); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.PopulatedBlog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlogService_GetBlogByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlogByID'
type BlogService_GetBlogByID_Call struct {
	*mock.Call
}

// GetBlogByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *BlogService_Expecter) GetBlogByID(_a0 interface{}, _a1 interface{}) *BlogService_GetBlogByID_Call {
	return &BlogService_GetBlogByID_Call{Call: _e.mock.On("GetBlogByID", _a0, _a1)}
}

func (_c *BlogService_GetBlogByID_Call) Run(run func(_a0 context.Context, _a1 string)) *BlogService_GetBlogByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BlogService_GetBlogByID_Call) Return(_a0 *domains.PopulatedBlog, _a1 error) *BlogService_GetBlogByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlogService_GetBlogByID_Call) RunAndReturn(run func(context.Context, string) (*domains.PopulatedBlog, error)) *BlogService_GetBlogByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListBlog provides a mock function with given fields: _a0, _a1
func (_m *BlogService) ListBlog(_a0 context.Context, _a1 *domains.ListBlogRequest) (*domains.ListBlogResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domains.ListBlogResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.ListBlogRequest) (*domains.ListBlogResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.ListBlogRequest) *domains.ListBlogResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.ListBlogResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.ListBlogRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlogService_ListBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlog'
type BlogService_ListBlog_Call struct {
	*mock.Call
}

// ListBlog is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.ListBlogRequest
func (_e *BlogService_Expecter) ListBlog(_a0 interface{}, _a1 interface{}) *BlogService_ListBlog_Call {
	return &BlogService_ListBlog_Call{Call: _e.mock.On("ListBlog", _a0, _a1)}
}

func (_c *BlogService_ListBlog_Call) Run(run func(_a0 context.Context, _a1 *domains.ListBlogRequest)) *BlogService_ListBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.ListBlogRequest))
	})
	return _c
}

func (_c *BlogService_ListBlog_Call) Return(_a0 *domains.ListBlogResponse, _a1 error) *BlogService_ListBlog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlogService_ListBlog_Call) RunAndReturn(run func(context.Context, *domains.ListBlogRequest) (*domains.ListBlogResponse, error)) *BlogService_ListBlog_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBlogStatus provides a mock function with given fields: _a0, _a1
func (_m *BlogService) UpdateBlogStatus(_a0 context.Context, _a1 *domains.UpdateBlogStatusRequest) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.UpdateBlogStatusRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlogService_UpdateBlogStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBlogStatus'
type BlogService_UpdateBlogStatus_Call struct {
	*mock.Call
}

// UpdateBlogStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domains.UpdateBlogStatusRequest
func (_e *BlogService_Expecter) UpdateBlogStatus(_a0 interface{}, _a1 interface{}) *BlogService_UpdateBlogStatus_Call {
	return &BlogService_UpdateBlogStatus_Call{Call: _e.mock.On("UpdateBlogStatus", _a0, _a1)}
}

func (_c *BlogService_UpdateBlogStatus_Call) Run(run func(_a0 context.Context, _a1 *domains.UpdateBlogStatusRequest)) *BlogService_UpdateBlogStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domains.UpdateBlogStatusRequest))
	})
	return _c
}

func (_c *BlogService_UpdateBlogStatus_Call) Return(_a0 error) *BlogService_UpdateBlogStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlogService_UpdateBlogStatus_Call) RunAndReturn(run func(context.Context, *domains.UpdateBlogStatusRequest) error) *BlogService_UpdateBlogStatus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBlogService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlogService creates a new instance of BlogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlogService(t mockConstructorTestingTNewBlogService) *BlogService {
	mock := &BlogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
